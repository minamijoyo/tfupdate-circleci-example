version: 2.1
executors:
  tfupdate:
    docker:
      - image: minamijoyo/tfupdate:latest

commands:
  generate_github_app_token:
    description: Generate github app token
    parameters:
      github_app_name:
        description: environment variable name for GitHub App name
        type: env_var_name
        default: GITHUB_APP_NAME
      github_app_id:
        description: environment variable name for GitHub App ID
        type: env_var_name
        default: GITHUB_APP_ID
      github_app_private_key:
        description: environment variable name for GitHub App private key
        type: env_var_name
        default: GITHUB_APP_PRIVATE_KEY
    steps:
      - run:
          name: Generate github app token
          command: |
            export APP_ID="${<< parameters.github_app_id >>}"
            export APP_SECRET=$(echo "${<< parameters.github_app_private_key >>}" | sed 's/\\n/\n/g')
            export GH_REPO=$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME
            GITHUB_TOKEN=$(bin/get_github_app_token.sh)
            echo "export GITHUB_TOKEN=$GITHUB_TOKEN" >> $BASH_ENV
            # The hub command requires to set $GITHUB_USER explicitly.
            echo "export GITHUB_USER=${<< parameters.github_app_name >>}" >> $BASH_ENV

  git_config_for_app:
    description: Setup git config
    parameters:
      user_name:
        description: git user name
        type: string
      user_email:
        description: git user email
        type: string
    steps:
      # At the time of this writing, the official GitHub App documentation
      # indicates to use a password authentication for git operations,
      # but this method has already been removed.
      # Use a deploy key with write permission instead.
      # https://docs.github.com/en/developers/apps/building-github-apps/authenticating-with-github-apps#http-based-git-access-by-an-installation
      # https://github.blog/2020-12-15-token-authentication-requirements-for-git-operations/
      # https://circleci.com/docs/add-ssh-key
      - run:
          name: Setup git config
          command: |
            git config --local user.name << parameters.user_name >>
            git config --local user.email << parameters.user_email >>

  git_config_for_pat:
    description: Setup git config
    parameters:
      user_name:
        description: git user name
        type: string
      user_email:
        description: git user email
        type: string
      github_token:
        description: environment variable name for GitHub access token
        type: env_var_name
        default: GITHUB_TOKEN
    steps:
      - run:
          name: Setup git config
          command: |
            git config --local user.name << parameters.user_name >>
            git config --local user.email << parameters.user_email >>
            mkdir -p $HOME/.config
            echo "https://${<< parameters.github_token >>}:@github.com" > $HOME/.config/git-credential
            git config --local credential.helper "store --file=$HOME/.config/git-credential"
            git config --local url."https://github.com/".insteadOf 'git@github.com:'

  tfupdate_terraform:
    description: Update the terraform to latest
    parameters:
      args:
        description: Arguments for tfupdate command
        type: string
        default: "-r ./"
      base_branch:
        description: A base branch name to update
        type: string
        default: master
    steps:
      - run:
          name: Update terraform to latest
          command: |
            VERSION=$(tfupdate release latest hashicorp/terraform)
            UPDATE_MESSAGE="[tfupdate] Update terraform to v${VERSION}"
            if hub pr list -s "open" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request already exists"
            elif hub pr list -s "merged" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request is already merged"
            else
              git checkout -b update-terraform-to-v${VERSION} origin/<< parameters.base_branch >>
              tfupdate terraform -v ${VERSION} << parameters.args >>

              # update CircleCI (tfupdate_provider)
              sed -i -E "s#terraform_version: \'[0-9]+(\.[0-9]+)*(-.*)*\'#terraform_version: \'$VERSION\'#" .circleci/config.yml

              if git add . && git diff --cached --exit-code --quiet; then
                echo "No changes"
              else
                git commit -m "$UPDATE_MESSAGE"
                PULL_REQUEST_BODY="For details see: https://github.com/hashicorp/terraform/releases"
                git push origin HEAD && hub pull-request -m "$UPDATE_MESSAGE" -m "$PULL_REQUEST_BODY" -b << parameters.base_branch >>
              fi
            fi

  tfupdate_provider:
    description: Update a provider to latest
    parameters:
      args:
        description: Arguments for tfupdate command
        type: string
        default: "-r ./"
      base_branch:
        description: A base branch name to update
        type: string
        default: master
      provider_name:
        description: A name of provider
        type: string
      terraform_version:
        description: A version of terraform command for updating a lock file
        type: string
        default: latest
    steps:
      - run:
          name: Update terraform-provider-<< parameters.provider_name >> to latest
          command: |
            VERSION=$(tfupdate release latest terraform-providers/terraform-provider-<< parameters.provider_name >>)
            UPDATE_MESSAGE="[tfupdate] Update terraform-provider-<< parameters.provider_name >> to v${VERSION}"
            if hub pr list -s "open" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request already exists"
            elif hub pr list -s "merged" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request is already merged"
            else
              git checkout -b update-terraform-provider-<< parameters.provider_name >>-to-v${VERSION} origin/<< parameters.base_branch >>
              tfupdate provider << parameters.provider_name >> -v ${VERSION} << parameters.args >>

              # install terraform
              TERRAFORM_VERSION=<< parameters.terraform_version >>
              if [ "${TERRAFORM_VERSION}" = "latest" ]; then
                TERRAFORM_VERSION=$(tfupdate release latest hashicorp/terraform)
              fi
              wget -q -O terraform.zip https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip && unzip -d /bin terraform.zip && rm terraform.zip && chmod +x /bin/terraform
              terraform version

              # generate .terraform.lock.hcl
              bin/tflock_generate.sh

              if git add . && git diff --cached --exit-code --quiet; then
                echo "No changes"
              else
                git commit -m "$UPDATE_MESSAGE"
                PULL_REQUEST_BODY="For details see: https://github.com/terraform-providers/terraform-provider-<< parameters.provider_name >>/releases"
                git push origin HEAD && hub pull-request -m "$UPDATE_MESSAGE" -m "$PULL_REQUEST_BODY" -b << parameters.base_branch >>
              fi
            fi

jobs:
  tfupdate:
    executor: tfupdate
    steps:
      - checkout
      - run: tfupdate --version
      # For GitHub App, set the followings via environment variable and use a write deploy key.
      # - GITHUB_APP_NAME
      # - GITHUB_APP_ID
      # - GITHUB_APP_PRIVATE_KEY
      - generate_github_app_token
      - git_config_for_app:
          user_name: "$GITHUB_APP_NAME"
          user_email: 'minamijoyo+tfupdate-circleci@gmail.com'
      # For GitHub PAT, set your GITHUB_TOKEN via environment variable.
      # - git_config_for_pat:
      #     user_name: 'tfupdate-circleci'
      #     user_email: 'minamijoyo+tfupdate-circleci@gmail.com'
      - tfupdate_terraform
      - tfupdate_provider:
          provider_name: 'aws'
          terraform_version: '1.4.6'

workflows:
  version: 2
  scheduled:
    # Scheduled pipelines
    # https://circleci.com/docs/scheduled-pipelines/
    when:
      and:
        - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
        - equal: [ "tfupdate daily", << pipeline.schedule.name >> ]
    # Equivalent to the following settings in the legacy scheduled workflow
    # triggers:
    #   - schedule:
    #       cron: "0 0 * * *"  # minute hour day month week (UTC)
    #       filters:
    #         branches:
    #           only:
    #             - master
    jobs:
      - tfupdate
  tfupdate_test:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - tfupdate:
          filters:
            branches:
              only:
                - /tfupdate-.*/
