version: 2.1
executors:
  tfupdate:
    docker:
      - image: minamijoyo/tfupdate:latest

commands:
  git_config:
    description: Setup git config
    parameters:
      user_name:
        description: git user name
        type: string
      user_email:
        description: git user email
        type: string
      github_token:
        description: environment variable name for GitHub access token
        type: env_var_name
        default: GITHUB_TOKEN
    steps:
      - run:
          name: Setup git config
          command: |
            git config --local user.name << parameters.user_name >>
            git config --local user.email << parameters.user_email >>
            mkdir -p $HOME/.config
            echo "https://${<< parameters.github_token >>}:@github.com" > $HOME/.config/git-credential
            git config --local credential.helper "store --file=$HOME/.config/git-credential"
            git config --local url."https://github.com/".insteadOf 'git@github.com:'
  tfupdate_terraform:
    description: Update the terraform to latest
    parameters:
      args:
        description: Arguments for tfupdate command
        type: string
        default: "-r ./"
      base_branch:
        description: A base branch name to update
        type: string
        default: master
    steps:
      - run:
          name: Update terraform to latest
          command: |
            VERSION=$(tfupdate release latest hashicorp/terraform)
            UPDATE_MESSAGE="[tfupdate] Update terraform to v${VERSION}"
            if hub pr list -s "open" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request already exists"
            elif hub pr list -s "merged" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request is already merged"
            else
              git checkout -b update-terraform-to-v${VERSION} origin/<< parameters.base_branch >>
              tfupdate terraform -v ${VERSION} << parameters.args >>

              # update CircleCI (tfupdate_provider)
              sed -i -E "s#terraform_version: \'[0-9]+(\.[0-9]+)*(-.*)*\'#terraform_version: \'$VERSION\'#" .circleci/config.yml

              if git add . && git diff --cached --exit-code --quiet; then
                echo "No changes"
              else
                git commit -m "$UPDATE_MESSAGE"
                PULL_REQUEST_BODY="For details see: https://github.com/hashicorp/terraform/releases"
                git push origin HEAD && hub pull-request -m "$UPDATE_MESSAGE" -m "$PULL_REQUEST_BODY" -b << parameters.base_branch >>
              fi
            fi
  tfupdate_provider:
    description: Update a provider to latest
    parameters:
      args:
        description: Arguments for tfupdate command
        type: string
        default: "-r ./"
      base_branch:
        description: A base branch name to update
        type: string
        default: master
      provider_name:
        description: A name of provider
        type: string
      terraform_version:
        description: A version of terraform command for updating a lock file
        type: string
        default: latest
    steps:
      - run:
          name: Update terraform-provider-<< parameters.provider_name >> to latest
          command: |
            VERSION=$(tfupdate release latest terraform-providers/terraform-provider-<< parameters.provider_name >>)
            UPDATE_MESSAGE="[tfupdate] Update terraform-provider-<< parameters.provider_name >> to v${VERSION}"
            if hub pr list -s "open" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request already exists"
            elif hub pr list -s "merged" -f "%t: %U%n" | grep -F "$UPDATE_MESSAGE"; then
              echo "A pull request is already merged"
            else
              git checkout -b update-terraform-provider-<< parameters.provider_name >>-to-v${VERSION} origin/<< parameters.base_branch >>
              tfupdate provider << parameters.provider_name >> -v ${VERSION} << parameters.args >>

              # install terraform
              TERRAFORM_VERSION=<< parameters.terraform_version >>
              if [ "${TERRAFORM_VERSION}" = "latest" ]; then
                TERRAFORM_VERSION=$(tfupdate release latest hashicorp/terraform)
              fi
              wget -qO- https://releases.hashicorp.com/terraform/${TERRAFORM_VERSION}/terraform_${TERRAFORM_VERSION}_linux_amd64.zip | unzip -d /bin - && chmod +x /bin/terraform
              terraform version

              # generate .terraform.lock.hcl
              bin/tflock_generate.sh

              if git add . && git diff --cached --exit-code --quiet; then
                echo "No changes"
              else
                git commit -m "$UPDATE_MESSAGE"
                PULL_REQUEST_BODY="For details see: https://github.com/terraform-providers/terraform-provider-<< parameters.provider_name >>/releases"
                git push origin HEAD && hub pull-request -m "$UPDATE_MESSAGE" -m "$PULL_REQUEST_BODY" -b << parameters.base_branch >>
              fi
            fi

jobs:
  tfupdate:
    executor: tfupdate
    steps:
      - checkout
      - run: tfupdate --version
      - git_config:
          user_name: 'tfupdate-circleci'
          user_email: 'minamijoyo+tfupdate-circleci@gmail.com'
      - tfupdate_terraform
      - tfupdate_provider:
          provider_name: 'aws'
          terraform_version: '1.0.10'

workflows:
  version: 2
  scheduled:
    jobs:
      - tfupdate
    triggers:
      - schedule:
          cron: "0 0 * * *"  # minute hour day month week (UTC)
          filters:
            branches:
              only:
                - master
  tfupdate_test:
    jobs:
      - tfupdate:
          filters:
            branches:
              only:
                - /tfupdate-.*/
